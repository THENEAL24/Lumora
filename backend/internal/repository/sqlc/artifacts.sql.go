// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: artifacts.sql

package db

import (
	"context"
	"encoding/json"
)

const createArtifact = `-- name: CreateArtifact :one
INSERT INTO artifacts (user_id, name, total_parts, completed_parts, metadata)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, name, total_parts, completed_parts, metadata, created_at
`

type CreateArtifactParams struct {
	UserID         int32
	Name           string
	TotalParts     int16
	CompletedParts int16
	Metadata       json.RawMessage
}

func (q *Queries) CreateArtifact(ctx context.Context, arg CreateArtifactParams) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, createArtifact,
		arg.UserID,
		arg.Name,
		arg.TotalParts,
		arg.CompletedParts,
		arg.Metadata,
	)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.TotalParts,
		&i.CompletedParts,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const getArtifact = `-- name: GetArtifact :one
SELECT id, user_id, name, total_parts, completed_parts, metadata, created_at
FROM artifacts
WHERE id = $1
`

func (q *Queries) GetArtifact(ctx context.Context, id int32) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, getArtifact, id)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.TotalParts,
		&i.CompletedParts,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const listArtifactsByUser = `-- name: ListArtifactsByUser :many
SELECT id, user_id, name, total_parts, completed_parts, metadata, created_at
FROM artifacts
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListArtifactsByUserParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

func (q *Queries) ListArtifactsByUser(ctx context.Context, arg ListArtifactsByUserParams) ([]Artifact, error) {
	rows, err := q.db.QueryContext(ctx, listArtifactsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artifact
	for rows.Next() {
		var i Artifact
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.TotalParts,
			&i.CompletedParts,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArtifactProgress = `-- name: UpdateArtifactProgress :one
UPDATE artifacts
SET completed_parts = $2
WHERE id = $1
RETURNING id, user_id, name, total_parts, completed_parts, metadata, created_at
`

type UpdateArtifactProgressParams struct {
	ID             int32
	CompletedParts int16
}

func (q *Queries) UpdateArtifactProgress(ctx context.Context, arg UpdateArtifactProgressParams) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, updateArtifactProgress, arg.ID, arg.CompletedParts)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.TotalParts,
		&i.CompletedParts,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}
