// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: artifact_parts.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createArtifactPart = `-- name: CreateArtifactPart :one
INSERT INTO artifact_parts (artifact_id, session_id, part_index, part_type, rarity, metadata)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, artifact_id, session_id, part_index, part_type, rarity, metadata, created_at
`

type CreateArtifactPartParams struct {
	ArtifactID int32
	SessionID  sql.NullInt32
	PartIndex  int16
	PartType   sql.NullString
	Rarity     sql.NullString
	Metadata   json.RawMessage
}

func (q *Queries) CreateArtifactPart(ctx context.Context, arg CreateArtifactPartParams) (ArtifactPart, error) {
	row := q.db.QueryRowContext(ctx, createArtifactPart,
		arg.ArtifactID,
		arg.SessionID,
		arg.PartIndex,
		arg.PartType,
		arg.Rarity,
		arg.Metadata,
	)
	var i ArtifactPart
	err := row.Scan(
		&i.ID,
		&i.ArtifactID,
		&i.SessionID,
		&i.PartIndex,
		&i.PartType,
		&i.Rarity,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const listArtifactParts = `-- name: ListArtifactParts :many
SELECT id, artifact_id, session_id, part_index, part_type, rarity, metadata, created_at
FROM artifact_parts
WHERE artifact_id = $1
ORDER BY part_index ASC
`

func (q *Queries) ListArtifactParts(ctx context.Context, artifactID int32) ([]ArtifactPart, error) {
	rows, err := q.db.QueryContext(ctx, listArtifactParts, artifactID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ArtifactPart
	for rows.Next() {
		var i ArtifactPart
		if err := rows.Scan(
			&i.ID,
			&i.ArtifactID,
			&i.SessionID,
			&i.PartIndex,
			&i.PartType,
			&i.Rarity,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
