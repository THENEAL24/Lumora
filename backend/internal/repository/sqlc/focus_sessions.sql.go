// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: focus_sessions.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createFocusSession = `-- name: CreateFocusSession :one
INSERT INTO focus_sessions (user_id, task_id, started_at, ended_at, duration_minutes, completed)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, task_id, started_at, ended_at, duration_minutes, completed, created_at
`

type CreateFocusSessionParams struct {
	UserID          int32
	TaskID          sql.NullInt32
	StartedAt       time.Time
	EndedAt         sql.NullTime
	DurationMinutes sql.NullInt32
	Completed       bool
}

func (q *Queries) CreateFocusSession(ctx context.Context, arg CreateFocusSessionParams) (FocusSession, error) {
	row := q.db.QueryRowContext(ctx, createFocusSession,
		arg.UserID,
		arg.TaskID,
		arg.StartedAt,
		arg.EndedAt,
		arg.DurationMinutes,
		arg.Completed,
	)
	var i FocusSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TaskID,
		&i.StartedAt,
		&i.EndedAt,
		&i.DurationMinutes,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const listSessionsByUser = `-- name: ListSessionsByUser :many
SELECT id, user_id, task_id, started_at, ended_at, duration_minutes, completed, created_at
FROM focus_sessions
WHERE user_id = $1
ORDER BY started_at DESC
LIMIT $2 OFFSET $3
`

type ListSessionsByUserParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

func (q *Queries) ListSessionsByUser(ctx context.Context, arg ListSessionsByUserParams) ([]FocusSession, error) {
	rows, err := q.db.QueryContext(ctx, listSessionsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FocusSession
	for rows.Next() {
		var i FocusSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TaskID,
			&i.StartedAt,
			&i.EndedAt,
			&i.DurationMinutes,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
